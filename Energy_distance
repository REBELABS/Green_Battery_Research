{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12920229,"sourceType":"datasetVersion","datasetId":8175367},{"sourceId":12920729,"sourceType":"datasetVersion","datasetId":8175708},{"sourceId":12925923,"sourceType":"datasetVersion","datasetId":8179145},{"sourceId":13042501,"sourceType":"datasetVersion","datasetId":8258766},{"sourceId":13042506,"sourceType":"datasetVersion","datasetId":8258771},{"sourceId":261334965,"sourceType":"kernelVersion"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-31T08:55:05.119883Z","iopub.execute_input":"2025-08-31T08:55:05.120354Z","iopub.status.idle":"2025-08-31T08:55:05.127229Z","shell.execute_reply.started":"2025-08-31T08:55:05.120315Z","shell.execute_reply":"2025-08-31T08:55:05.125671Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install hyppo","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-13T06:34:03.175931Z","iopub.execute_input":"2025-09-13T06:34:03.176410Z","iopub.status.idle":"2025-09-13T06:34:09.824482Z","shell.execute_reply.started":"2025-09-13T06:34:03.176382Z","shell.execute_reply":"2025-09-13T06:34:09.823129Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"Collecting hyppo\n  Downloading hyppo-0.5.2-py3-none-any.whl.metadata (2.1 kB)\nRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.26.4)\nRequirement already satisfied: scipy>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.15.3)\nRequirement already satisfied: numba>=0.46 in /usr/local/lib/python3.11/dist-packages (from hyppo) (0.60.0)\nRequirement already satisfied: scikit-learn>=0.19.1 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.2.2)\nRequirement already satisfied: autograd>=1.3 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.8.0)\nRequirement already satisfied: statsmodels>=0.14.1 in /usr/local/lib/python3.11/dist-packages (from hyppo) (0.14.4)\nRequirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.0.1)\nRequirement already satisfied: pandas>=2.2.3 in /usr/local/lib/python3.11/dist-packages (from hyppo) (2.2.3)\nRequirement already satisfied: future>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.0.0)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.46->hyppo) (0.43.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (2.4.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.2.3->hyppo) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.2.3->hyppo) (2025.2)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.2.3->hyppo) (2025.2)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.19.1->hyppo) (1.5.1)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.19.1->hyppo) (3.6.0)\nRequirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.11/dist-packages (from statsmodels>=0.14.1->hyppo) (25.0)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=2.2.3->hyppo) (1.17.0)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->hyppo) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->hyppo) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->hyppo) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.17->hyppo) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.17->hyppo) (2024.2.0)\nDownloading hyppo-0.5.2-py3-none-any.whl (192 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m192.3/192.3 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mta \u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: hyppo\nSuccessfully installed hyppo-0.5.2\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import psutil\nimport shutil\nimport os","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-12T23:52:17.595479Z","iopub.execute_input":"2025-09-12T23:52:17.595899Z","iopub.status.idle":"2025-09-12T23:52:17.600818Z","shell.execute_reply.started":"2025-09-12T23:52:17.595871Z","shell.execute_reply":"2025-09-12T23:52:17.599816Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"import numpy as np\nfrom tqdm import tqdm\nfrom hyppo.ksample import Energy\nimport random\nimport time","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-13T06:34:21.143803Z","iopub.execute_input":"2025-09-13T06:34:21.144256Z","iopub.status.idle":"2025-09-13T06:34:26.129031Z","shell.execute_reply.started":"2025-09-13T06:34:21.144212Z","shell.execute_reply":"2025-09-13T06:34:26.128250Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"#Check the  Virtual RAM\nvmem = psutil.virtual_memory()\nprint(f\"Total available RAM: {vmem.total/ 1e9:.2f} GB\")\nprint(f\"Available: {vmem.available/ 1e9:.2f} GB\")\nprint(f\"Used: {vmem.used/ 1e9:.2f} GB\")\nprint(f\"Free: {vmem.free/ 1e9:.2f} GB\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-12T23:45:15.917717Z","iopub.execute_input":"2025-09-12T23:45:15.918282Z","iopub.status.idle":"2025-09-12T23:45:15.925656Z","shell.execute_reply.started":"2025-09-12T23:45:15.918253Z","shell.execute_reply":"2025-09-12T23:45:15.924645Z"},"collapsed":true,"jupyter":{"outputs_hidden":true,"source_hidden":true}},"outputs":[{"name":"stdout","text":"Total available RAM: 33.66 GB\nAvailable: 32.26 GB\nUsed: 0.94 GB\nFree: 31.51 GB\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"#Loading the bootstrap power data from the .npz file\nv_data = np.load(\"/kaggle/input/volt-modes/Voltage_Bootstrap_and_Modes.npz\")\n#print(v_data.files)\n#Assign to variables\nv_a_mode = v_data['Sample_A_volt_bs']\nv_b_mode = v_data['Sample_B']\nv_c_mode = v_data['Sample_C']\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-13T06:35:12.434777Z","iopub.execute_input":"2025-09-13T06:35:12.435311Z","iopub.status.idle":"2025-09-13T06:35:12.482816Z","shell.execute_reply.started":"2025-09-13T06:35:12.435281Z","shell.execute_reply":"2025-09-13T06:35:12.481728Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"The hyppo package ran into Error: Your notebook tried to allocate more memory than is available. It has restarted.","metadata":{}},{"cell_type":"markdown","source":"#Required 2D and Energy distance for the Bootstrap volt modes\nv_aen = np.array(v_a_mode).reshape(-1,1)\nv_ben = np.array(v_b_mode).reshape(-1,1)\nv_cen = np.array(v_c_mode).reshape(-1,1)\n\n#Energy distance using hyppo\nED_AB, pval_AB = Energy().test(v_aen,v_ben)","metadata":{"execution":{"iopub.status.busy":"2025-09-12T23:17:55.273701Z","iopub.execute_input":"2025-09-12T23:17:55.273982Z","execution_failed":"2025-09-12T23:19:02.187Z"}}},{"cell_type":"code","source":"#Def statement to chunk the pairwise comparison\ndef chunked_diff_sum(a,b,block):\n    a = np.asarray(a,dtype=np.float64)\n    b = np.asarray(b,dtype=np.float64)\n    total = 0.0\n    try:\n        #1D data use absoute difference\n        if a.ndim == 1 and b.ndim == 1:\n            for i in range(0, len(a), block):\n                x_block = a[i:i+block]\n                for j in range(0, len(b), block):\n                    y_block = b[j:j+block]\n                    #Absolute difference of column vector - row vector\n                    abs_diff = np.abs(x_block[:,None]-y_block[None,:])\n                    total +=abs_diff.sum()\n        \n        #2D data use Euclidean distance\n        elif a.ndim == 2 and b.ndim == 2:\n            for i in range(0, len(a), block):\n                x_block = a[i:i+block]\n                for j in range(0, len(b), block):\n                    y_block = b[j:j+block]\n                    #Absolute difference of column vector - row vector\n                    diff = (x_block[:,None,:]-y_block[None,:,:])\n                    eu_dist = np.linalg.norm(diff,axis=2)#Euclidean distance\n                    total +=eu_dist.sum()\n\n        else:\n            raise ValueError(\"Input must both either be in 1D or 2D\") \n        \n        #Answer       \n        return total\n        \n    except Exception as e:\n        print(\"Error:\", str(e))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-12T23:52:26.967832Z","iopub.execute_input":"2025-09-12T23:52:26.968205Z","iopub.status.idle":"2025-09-12T23:52:26.976871Z","shell.execute_reply.started":"2025-09-12T23:52:26.968179Z","shell.execute_reply":"2025-09-12T23:52:26.975763Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"#Def statement for energy distance\ndef energy_distance_1d(a,b,block):\n    n, m = len(a), len(b)\n    xy = chunked_diff_sum(a, b, block)\n    xx = chunked_diff_sum(a, a, block)\n    yy = chunked_diff_sum(b, b, block)\n    ed_real = 2*(xy/(n*m)) - xx/(n*n) - yy/(m*m) \n    return ed_real","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-12T23:52:29.930785Z","iopub.execute_input":"2025-09-12T23:52:29.931140Z","iopub.status.idle":"2025-09-12T23:52:29.937227Z","shell.execute_reply.started":"2025-09-12T23:52:29.931112Z","shell.execute_reply":"2025-09-12T23:52:29.936156Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"#Applied Energy Distance\nstart_time = time.time()\nen_dist = energy_distance_1d(v_a_mode,v_b_mode,block=5000)\nend_time = time.time()-start_time\nprint(en_dist)\nprint(end_time)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-12T23:45:39.715137Z","iopub.execute_input":"2025-09-12T23:45:39.715504Z","iopub.status.idle":"2025-09-12T23:45:47.495578Z","shell.execute_reply.started":"2025-09-12T23:45:39.715475Z","shell.execute_reply":"2025-09-12T23:45:47.494692Z"},"jupyter":{"source_hidden":true,"outputs_hidden":true},"collapsed":true},"outputs":[{"name":"stdout","text":"0.021051398383874438\n7.774480104446411\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"##Custom Estimate ED and P-value\ndef ed_p_value(a,b,block,n_perm): #n_perm is number of permutation\n    #Empty lists to hold the permuted energy distance values\n    perm_ed = []\n    #Energy distance of real values\n    ed_real = energy_distance_1d(a,b,block)\n    #Merge the data\n    merged_data = np.concatenate([a,b])\n    for o in tqdm(range(n_perm),desc=\"Permutations\"):   \n        #Shuffle\n        sh_data = merged_data.copy()\n        np.random.shuffle(sh_data)\n        #Partition the fake data\n        a_perm = sh_data[:len(a)]\n        b_perm = sh_data[len(a):]\n        #Energy distance of fake data\n        ed_sh = energy_distance_1d(a_perm, b_perm, block)\n        perm_ed.append(ed_sh)\n    #Estimate the P_value\n    p_val = (np.sum(np.array(perm_ed)>= ed_real) + 1)/(n_perm + 1)\n    return ed_real, p_val","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-12T23:52:32.894391Z","iopub.execute_input":"2025-09-12T23:52:32.895525Z","iopub.status.idle":"2025-09-12T23:52:32.902254Z","shell.execute_reply.started":"2025-09-12T23:52:32.895487Z","shell.execute_reply":"2025-09-12T23:52:32.901128Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"#Applied custom Estimate ED and P-value\nstartp= time.time()\nen_dis,en_p = ed_p_value(v_a_mode,v_b_mode,block=5000,n_perm = 2000)\nendp = time.time()-startp\nprint(f\"Energy Distance: {en_dis:.4f} | P_value: {en_p:.4f} | Time taken: {endp} seconds\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-12T23:56:19.027272Z","iopub.execute_input":"2025-09-12T23:56:19.027633Z","iopub.status.idle":"2025-09-13T04:13:29.436162Z","shell.execute_reply.started":"2025-09-12T23:56:19.027603Z","shell.execute_reply":"2025-09-13T04:13:29.430865Z"},"jupyter":{"outputs_hidden":true,"source_hidden":true},"collapsed":true},"outputs":[{"name":"stderr","text":"Permutations: 100%|██████████| 2000/2000 [4:17:02<00:00,  7.71s/it]  ","output_type":"stream"},{"name":"stdout","text":"Energy Distance: 0.0211 | P_value: 0.0005 | Time taken: 15430.390629291534 seconds\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}],"execution_count":23},{"cell_type":"markdown","source":"#Created an utility file for the custome ED estimator and imported it in","metadata":{}},{"cell_type":"code","source":"#import the custom energy distance script\nfrom rbenergy import ed_p_value","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-13T06:35:46.132157Z","iopub.execute_input":"2025-09-13T06:35:46.132898Z","iopub.status.idle":"2025-09-13T06:35:46.137336Z","shell.execute_reply.started":"2025-09-13T06:35:46.132863Z","shell.execute_reply":"2025-09-13T06:35:46.136209Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"#apply the script imported\ned_vab, pval_vab,_, time_vab = ed_p_value(v_a_mode,v_b_mode,block=5000,n_perm=2000, full=True, seed=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-13T06:42:24.891212Z","iopub.execute_input":"2025-09-13T06:42:24.891578Z","iopub.status.idle":"2025-09-13T06:42:32.479576Z","shell.execute_reply.started":"2025-09-13T06:42:24.891554Z","shell.execute_reply":"2025-09-13T06:42:32.478168Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/2482772723.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#apply the script imported\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0med_vab\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpval_vab\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtime_vab\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0med_p_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv_a_mode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv_b_mode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5000\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn_perm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfull\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/kaggle/usr/lib/energy_dist_nb/rbenergy.py\u001b[0m in \u001b[0;36med_p_value\u001b[0;34m(a, b, block, n_perm, full, seed)\u001b[0m\n\u001b[1;32m    107\u001b[0m     \u001b[0;31m#Merge the data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m     \u001b[0mmerged_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 109\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_perm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdesc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Permutations\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    110\u001b[0m         \u001b[0;31m#Shuffle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    111\u001b[0m         \u001b[0msh_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmerged_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'module' object is not callable"],"ename":"TypeError","evalue":"'module' object is not callable","output_type":"error"}],"execution_count":12},{"cell_type":"code","source":"#Saving the outputs in a txt file\n#shutil.rmtree(\"/kaggle/working/energy-distance-log\")\nos.makedirs(\"/kaggle/working/energy-distance-log\")\nif not os.path.exists(\"/kaggle/working/energy-distance-log/Power_Bootstrap_logs.txt\"):\n    shutil.copy(\"/kaggle/input/energy-distance-log/Power_Bootstrap_logs.txt\",\"/kaggle/working/energy-distance-log/Power_Bootstrap_logs.txt\")\nwith open(\"/kaggle/working/energy-distance-log/Power_Bootstrap_logs.txt\",\"a\") as f:\n    f.write(\"\\n\")\n    f.write(\"\\n------------------\")\n    f.write(\"\\n#Bootstrap Power Energy Distance Comparison\")\n    f.write(\"\\n#Sample B vs C Energy Distance Comparison\\n\")\n    f.write(f\"Energy Distance: 0.0269 | P_value: 0.0005 | Time taken: 11820.82726430893 seconds\")\n    #f.write(f\"Energy Distance: {en_dis:.4f} | P_value: {en_p:.4f} | Time taken: {endp} seconds\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T08:41:16.993320Z","iopub.execute_input":"2025-09-06T08:41:16.993683Z","iopub.status.idle":"2025-09-06T08:41:17.003922Z","shell.execute_reply.started":"2025-09-06T08:41:16.993658Z","shell.execute_reply":"2025-09-06T08:41:17.002787Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"ppoiiurewqasdfghjkl;'/.,mnbvcxz\\=1234567890","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}