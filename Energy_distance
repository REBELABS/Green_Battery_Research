{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12920229,"sourceType":"datasetVersion","datasetId":8175367},{"sourceId":12920729,"sourceType":"datasetVersion","datasetId":8175708},{"sourceId":12925923,"sourceType":"datasetVersion","datasetId":8179145}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-31T08:55:05.119883Z","iopub.execute_input":"2025-08-31T08:55:05.120354Z","iopub.status.idle":"2025-08-31T08:55:05.127229Z","shell.execute_reply.started":"2025-08-31T08:55:05.120315Z","shell.execute_reply":"2025-08-31T08:55:05.125671Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install hyppo","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T00:44:39.315261Z","iopub.execute_input":"2025-09-06T00:44:39.315427Z","iopub.status.idle":"2025-09-06T00:44:44.066516Z","shell.execute_reply.started":"2025-09-06T00:44:39.315412Z","shell.execute_reply":"2025-09-06T00:44:44.065624Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"Collecting hyppo\n  Downloading hyppo-0.5.2-py3-none-any.whl.metadata (2.1 kB)\nRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.26.4)\nRequirement already satisfied: scipy>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.15.3)\nRequirement already satisfied: numba>=0.46 in /usr/local/lib/python3.11/dist-packages (from hyppo) (0.60.0)\nRequirement already satisfied: scikit-learn>=0.19.1 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.2.2)\nRequirement already satisfied: autograd>=1.3 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.8.0)\nRequirement already satisfied: statsmodels>=0.14.1 in /usr/local/lib/python3.11/dist-packages (from hyppo) (0.14.4)\nRequirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.0.1)\nRequirement already satisfied: pandas>=2.2.3 in /usr/local/lib/python3.11/dist-packages (from hyppo) (2.2.3)\nRequirement already satisfied: future>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from hyppo) (1.0.0)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.46->hyppo) (0.43.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->hyppo) (2.4.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.2.3->hyppo) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.2.3->hyppo) (2025.2)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.2.3->hyppo) (2025.2)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.19.1->hyppo) (1.5.1)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.19.1->hyppo) (3.6.0)\nRequirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.11/dist-packages (from statsmodels>=0.14.1->hyppo) (25.0)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=2.2.3->hyppo) (1.17.0)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->hyppo) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->hyppo) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->hyppo) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.17->hyppo) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.17->hyppo) (2024.2.0)\nDownloading hyppo-0.5.2-py3-none-any.whl (192 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m192.3/192.3 kB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: hyppo\nSuccessfully installed hyppo-0.5.2\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import psutil\nimport shutil\nimport os","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T07:34:14.583582Z","iopub.execute_input":"2025-09-06T07:34:14.583837Z","iopub.status.idle":"2025-09-06T07:34:14.587920Z","shell.execute_reply.started":"2025-09-06T07:34:14.583818Z","shell.execute_reply":"2025-09-06T07:34:14.587115Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"import numpy as np\nfrom hyppo.ksample import Energy\nimport random\nimport time","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T00:45:03.217801Z","iopub.execute_input":"2025-09-06T00:45:03.218090Z","iopub.status.idle":"2025-09-06T00:45:06.119236Z","shell.execute_reply.started":"2025-09-06T00:45:03.218072Z","shell.execute_reply":"2025-09-06T00:45:06.118624Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"#Check the  Virtual RAM\nvmem = psutil.virtual_memory()\nprint(f\"Total available RAM: {vmem.total/ 1e9:.2f} GB\")\nprint(f\"Available: {vmem.available/ 1e9:.2f} GB\")\nprint(f\"Used: {vmem.used/ 1e9:.2f} GB\")\nprint(f\"Free: {vmem.free/ 1e9:.2f} GB\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T00:45:11.717119Z","iopub.execute_input":"2025-09-06T00:45:11.717471Z","iopub.status.idle":"2025-09-06T00:45:11.723895Z","shell.execute_reply.started":"2025-09-06T00:45:11.717453Z","shell.execute_reply":"2025-09-06T00:45:11.723089Z"},"collapsed":true,"jupyter":{"source_hidden":true,"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"Total available RAM: 33.66 GB\nAvailable: 32.26 GB\nUsed: 0.92 GB\nFree: 30.96 GB\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"#Loading the bootstrap power data from the .npz file\nv_data = np.load(\"/kaggle/input/volt-modes/Voltage_Bootstrap_and_Modes.npz\")\nprint(v_data.files)\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T00:45:37.997120Z","iopub.execute_input":"2025-09-06T00:45:37.997731Z","iopub.status.idle":"2025-09-06T00:45:38.014550Z","shell.execute_reply.started":"2025-09-06T00:45:37.997710Z","shell.execute_reply":"2025-09-06T00:45:38.013597Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"#Energy distance for the Bootstrap Power\np_ben = np.array(P_b_mode)\n\np_cen = np.array(P_c_mode)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T00:45:44.108577Z","iopub.execute_input":"2025-09-06T00:45:44.109241Z","iopub.status.idle":"2025-09-06T00:45:44.113255Z","shell.execute_reply.started":"2025-09-06T00:45:44.109220Z","shell.execute_reply":"2025-09-06T00:45:44.112323Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"#Def statement to chunk the pairwise comparison\ndef chunked_diff_sum(a,b,block):\n    a = np.asarray(a,dtype=np.float64)\n    b = np.asarray(b,dtype=np.float64)\n    total = 0.0\n    try:\n        #1D data use absoute difference\n        if a.ndim == 1 and b.ndim == 1:\n            for i in range(0, len(a), block):\n                x_block = a[i:i+block]\n                for j in range(0, len(b), block):\n                    y_block = b[j:j+block]\n                    #Absolute difference of column vector - row vector\n                    abs_diff = np.abs(x_block[:,None]-y_block[None,:])\n                    total +=abs_diff.sum()\n        \n        #2D data use Euclidean distance\n        elif a.ndim == 2 and b.ndim == 2:\n            for i in range(0, len(a), block):\n                x_block = a[i:i+block]\n                for j in range(0, len(b), block):\n                    y_block = b[j:j+block]\n                    #Absolute difference of column vector - row vector\n                    diff = (x_block[:,None,:]-y_block[None,:,:])\n                    eu_dist = np.linalg.norm(diff,axis=2)#Euclidean distance\n                    total +=eu_dist.sum()\n\n        else:\n            raise ValueError(\"Input must both either be in 1D or 2D\") \n        \n        #Answer       \n        return total\n        \n    except Exception as e:\n        print(\"Error:\", str(e))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T00:45:49.337193Z","iopub.execute_input":"2025-09-06T00:45:49.337437Z","iopub.status.idle":"2025-09-06T00:45:49.344539Z","shell.execute_reply.started":"2025-09-06T00:45:49.337418Z","shell.execute_reply":"2025-09-06T00:45:49.343924Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"#Def statement for energy distance\ndef energy_distance_1d(a,b,block):\n    n, m = len(a), len(b)\n    xy = chunked_diff_sum(a, b, block)\n    xx = chunked_diff_sum(a, a, block)\n    yy = chunked_diff_sum(b, b, block)\n    ed_real = 2*(xy/(n*m)) - xx/(n*n) - yy/(m*m) \n    return ed_real","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T00:45:58.297137Z","iopub.execute_input":"2025-09-06T00:45:58.297387Z","iopub.status.idle":"2025-09-06T00:45:58.302953Z","shell.execute_reply.started":"2025-09-06T00:45:58.297370Z","shell.execute_reply":"2025-09-06T00:45:58.301742Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"#Applied Energy Distance\nstart_time = time.time()\nen_dist = energy_distance_1d(P_b_mode,P_c_mode,block=5000)\nend_time = time.time()-start_time\nprint(en_dist)\nprint(end_time)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T00:46:03.981373Z","iopub.execute_input":"2025-09-06T00:46:03.981666Z","iopub.status.idle":"2025-09-06T00:46:09.943768Z","shell.execute_reply.started":"2025-09-06T00:46:03.981650Z","shell.execute_reply":"2025-09-06T00:46:09.943143Z"},"jupyter":{"outputs_hidden":true},"collapsed":true},"outputs":[{"name":"stdout","text":"0.02691076522228547\n5.958334922790527\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"##Estimate P-value\ndef ed_p_value(a,b,block,n_perm): #n_perm is number of permutation\n    #Empty lists to hold the permuted energy distance values\n    perm_ed = []\n    #Energy distance of real values\n    ed_real = energy_distance_1d(a,b,block)\n    #Merge the data\n    merged_data = np.concatenate([a,b])\n    for o in range(n_perm):   \n        #Shuffle\n        sh_data = merged_data.copy()\n        np.random.shuffle(sh_data)\n        #Partition the fake data\n        a_perm = sh_data[:len(a)]\n        b_perm = sh_data[len(a):]\n        #Energy distance of fake data\n        ed_sh = energy_distance_1d(a_perm, b_perm, block)\n        perm_ed.append(ed_sh)\n    #Estimate the P_value\n    p_val = (np.sum(np.array(perm_ed)>= ed_real) + 1)/(n_perm + 1)\n    return ed_real, p_val","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T00:46:28.077620Z","iopub.execute_input":"2025-09-06T00:46:28.077916Z","iopub.status.idle":"2025-09-06T00:46:28.083435Z","shell.execute_reply.started":"2025-09-06T00:46:28.077899Z","shell.execute_reply":"2025-09-06T00:46:28.082669Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"#Applied Energy_P_value\nstartp= time.time()\nen_dis,en_p = ed_p_value(P_b_mode,P_c_mode,block=5000,n_perm = 2000)\nendp = time.time()-startp\nprint(f\"Energy Distance: {en_dis:.4f} | P_value: {en_p:.4f} | Time taken: {endp} seconds\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T00:47:24.410291Z","iopub.execute_input":"2025-09-06T00:47:24.410578Z","iopub.status.idle":"2025-09-06T04:04:25.241931Z","shell.execute_reply.started":"2025-09-06T00:47:24.410557Z","shell.execute_reply":"2025-09-06T04:04:25.241077Z"}},"outputs":[{"name":"stdout","text":"Energy Distance: 0.0269 | P_value: 0.0005 | Time taken: 11820.82726430893 seconds\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"#Saving the outputs in a txt file\n#shutil.rmtree(\"/kaggle/working/energy-distance-log\")\nos.makedirs(\"/kaggle/working/energy-distance-log\")\nif not os.path.exists(\"/kaggle/working/energy-distance-log/Power_Bootstrap_logs.txt\"):\n    shutil.copy(\"/kaggle/input/energy-distance-log/Power_Bootstrap_logs.txt\",\"/kaggle/working/energy-distance-log/Power_Bootstrap_logs.txt\")\nwith open(\"/kaggle/working/energy-distance-log/Power_Bootstrap_logs.txt\",\"a\") as f:\n    f.write(\"\\n\")\n    f.write(\"\\n------------------\")\n    f.write(\"\\n#Bootstrap Power Energy Distance Comparison\")\n    f.write(\"\\n#Sample B vs C Energy Distance Comparison\\n\")\n    f.write(f\"Energy Distance: 0.0269 | P_value: 0.0005 | Time taken: 11820.82726430893 seconds\")\n    #f.write(f\"Energy Distance: {en_dis:.4f} | P_value: {en_p:.4f} | Time taken: {endp} seconds\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T08:41:16.993320Z","iopub.execute_input":"2025-09-06T08:41:16.993683Z","iopub.status.idle":"2025-09-06T08:41:17.003922Z","shell.execute_reply.started":"2025-09-06T08:41:16.993658Z","shell.execute_reply":"2025-09-06T08:41:17.002787Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"ppoiiurewqasdfghjkl;'/.,mnbvcxz\\=1234567890","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}